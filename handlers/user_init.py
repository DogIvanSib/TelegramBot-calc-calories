import json
from copy import deepcopy

from aiogram.types import Message


async def collect_init_from_user(
    users: dict, init_users: dict, message: Message
) -> bool:
    """–°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    Example user:
    {565062409: {'age': 1, 'weight': 2, 'height': 3, 'gender': '–º', 'calories': 2000}}
    """
    user_id = message.from_user.id
    answer = message.text
    if user_id in users:
        print(f"{user_id} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
        return True
    elif user_id not in init_users:
        await collect_init_Q1(message)
        init_users[user_id] = {"age": None}
    elif user_id in init_users and init_users[user_id].get("age", -1) is None:
        init_users[user_id]["age"] = int(answer)
        await collect_init_Q2(message)
        init_users[user_id] |= {"weight": None}
    elif user_id in init_users and init_users[user_id].get("weight", -1) is None:
        init_users[user_id]["weight"] = int(answer)
        await collect_init_Q3(message)
        init_users[user_id] |= {"height": None}
    elif user_id in init_users and init_users[user_id].get("height", -1) is None:
        init_users[user_id]["height"] = int(answer)
        await collect_init_Q4(message)
        init_users[user_id] |= {"gender": None}
    elif user_id in init_users and init_users[user_id].get("gender", -1) is None:
        if answer.lower() == "–º" or answer.lower() == "–∂":
            init_users[user_id]["gender"] = answer.lower()
        else:
            await message.answer("–ü—Ä–æ—à—É –≤–≤–æ–¥–∏—Ç—å –º –∏–ª–∏ –∂")
            return False
        init_users[user_id] |= {"calories": calc_calories(init_users[user_id])}
        #  –°–æ—Ö—Ä–∞–Ω—è—é –≤ users
        users[user_id] = deepcopy(init_users[user_id])
        del init_users[user_id]
        print(f"users=={users}")
        with open("save_users.txt", "w") as file:
            users_str = json.dumps(users)
            file.write(users_str)
            print("save_users —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        await message.answer(
            "‚ú® <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!</b>\n\n"
            "üç¥ –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å <i>–º–∏–¥–∏–∏ –≤ —Å–ª–∏–≤–æ—á–Ω–æ–º —Å–æ—É—Å–µ</i> ‚Äî –Ω–µ–∂–Ω–µ–π—à–µ–µ –±–ª—é–¥–æ!"
        )
    else:
        print(f"–ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è —à—Ç—É–∫–∞ –ø—Ä–∏—à–ª–∞ –≤ init_user. Answer: {answer}")
    print(f"init_users=={init_users}")
    return False


async def collect_init_Q1(message: Message):
    await message.answer(
        "üìä <b>–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π</b>\n"
        "1Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
    )


async def collect_init_Q2(message: Message):
    await message.answer("‚öñÔ∏è –í–∞—à –≤–µ—Å (–≤ –∫–≥):\n<i>–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 68</i>")


async def collect_init_Q3(message: Message):
    await message.answer(
        "üìè –í–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):\n<i>–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 175</i>"
    )


async def collect_init_Q4(message: Message):
    await message.answer(
        "üë§ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:\n\n"
        "‚ôÇÔ∏è –ú—É–∂—Å–∫–æ–π - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–ú</b>\n"
        "‚ôÄÔ∏è –ñ–µ–Ω—Å–∫–∏–π - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–ñ</b>\n\n"
        "<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω—É –±—É–∫–≤—É: –º –∏–ª–∏ –∂</i>",
    )


def calc_calories(init_users: dict) -> int:
    age = init_users["age"]
    if age < 10:
        return 2000
    if 10 < age < 14:
        return 2300
    weight = init_users["weight"]
    height = init_users["height"]
    gender = init_users["gender"]
    if gender == "–º":
        oo = 10 * weight + 6.25 * height - 5 * age + 5
    else:
        oo = 10 * weight + 6.25 * height - 5 * age - 161
    return oo * 1.375
