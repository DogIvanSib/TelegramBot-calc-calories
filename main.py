import json
import os
from datetime import datetime

import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery

from secret import TOKEN
from answers import START_BUTTON, ABOUT_BUTTON
from handlers.user_init import collect_init_from_user
from back.to_another_site import get_kkal
from keyboards.keyboard import get_keyboard
from handlers.add_products import add_product

dp = Dispatcher()


users = {}  # –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
if os.path.exists("save_users.txt"):
    with open("save_users.txt", "r") as file:
        users_str = file.read()
        users = json.loads(users_str)
        users = {int(k): v for k, v in users.items()}
        print("users —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω –∏–∑ save_users:")
        print(users)
else:
    print("–§–∞–π–ª save_users.txt –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å users")
init_users = {}  # –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
temporary_products = {}  # –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
products = {}  # –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –¥–æ–±–∞–≤–∏—Ç—å
notification = {}  # –æ–¥–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á—Ç–æ —Å–∫—É—à–∞–ª –º–Ω–æ–≥–æ


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """This handler receives messages with `/start` command"""
    await message.answer(START_BUTTON)


@dp.message(Command("profile"))
async def profile_handler(message: Message):
    """This handler receives messages with `/profile` command"""
    user_id = message.from_user.id
    if users.get(user_id, None):
        await message.answer(
            f"<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
            f"  üìÖ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {users[user_id]['age']} –ª–µ—Ç\n"
            f"  ‚öñÔ∏è <b>–í–µ—Å:</b> {users[user_id]['weight']} –∫–≥\n"
            f"  üìè <b>–†–æ—Å—Ç:</b> {users[user_id]['height']} —Å–º"
        )
    else:
        await message.answer(
            "üéØ <b>–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!</b>\n\n"
            "üìã –î–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤ –º–Ω–µ –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å\n\n"
            "üëâ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /sent_info\n\n"
            "<i>–≠—Ç–æ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ 2 –º–∏–Ω—É—Ç—ã</i> ‚è±Ô∏è",
        )


@dp.message(Command("stats_week"))
async def stats_handler(message: Message):
    """This handler receives messages with `/stats_week` command"""
    user_id = message.from_user.id
    if users.get(user_id, None):
        await message.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    else:
        await message.answer(
            "üéØ <b>–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!</b>\n\n"
            "üìã –î–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤ –º–Ω–µ –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å\n\n"
            "üëâ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /sent_info\n\n"
            "<i>–≠—Ç–æ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ 2 –º–∏–Ω—É—Ç—ã</i> ‚è±Ô∏è",
        )


@dp.message(Command("stats_today"))
async def stats_handler(message: Message):
    """This handler receives messages with `/stats_today` command"""
    user_id = message.from_user.id
    if users.get(user_id, None):
        current_datetime = datetime.now()
        time_string = current_datetime.strftime("%d-%m-%Y")
        if products.get(user_id, None):
            calories = products[user_id].get(time_string, 0)
            await message.answer(
                f"üçΩÔ∏è –°—ä–µ–¥–µ–Ω–æ {time_string}: <b>{calories}</b> –∫–∫–∞–ª\n"
                f"üéØ –ù–æ—Ä–º–∞: <b>{users[user_id]['calories']}</b> –∫–∫–∞–ª"
            )
        else:
            await message.answer(
                f"üçΩÔ∏è –°—ä–µ–¥–µ–Ω–æ {time_string}: <b>0</b> –∫–∫–∞–ª\n"
                f"üéØ –ù–æ—Ä–º–∞: <b>{users[user_id]['calories']}</b> –∫–∫–∞–ª"
            )
    else:
        await message.answer(
            "üéØ <b>–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!</b>\n\n"
            "üìã –î–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤ –º–Ω–µ –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å\n\n"
            "üëâ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /sent_info\n\n"
            "<i>–≠—Ç–æ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ 2 –º–∏–Ω—É—Ç—ã</i> ‚è±Ô∏è",
        )


@dp.message(Command("about"))
async def stats_handler(message: Message):
    """This handler receives messages with `/about` command"""
    await message.answer(ABOUT_BUTTON)


@dp.message()
async def receive_answer(message: Message) -> None:
    global users, init_users
    init_user = await collect_init_from_user(users, init_users, message)
    if init_user:
        answer = message.text
        user_id = message.from_user.id
        print(f"Message: {answer}")
        product = await get_kkal(answer)
        print(f"From back site: {product}")
        if product:
            temporary_products[user_id] = {
                "name": product["title"],
                "calories": int(product["value"]),
            }
            await message.answer(
                "üì¶ <b>–ü—Ä–æ–¥—É–∫—Ç:</b>\n"
                f"  üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product['title']}\n"
                f"  üí™ <b>–ö–∫–∞–ª–æ—Ä–∏–∏:</b> {product['value']}",
                reply_markup=get_keyboard(),
            )


@dp.callback_query(F.data.startswith("product_save"))
async def callbacks_product_save(callback: CallbackQuery):
    global products, users, temporary_products, notification
    user_id = callback.from_user.id
    name_product = temporary_products.get(user_id)["name"]
    calories_product = temporary_products.get(user_id)["calories"]
    if not name_product and calories_product:
        return
    print(f"{user_id} –Ω–∞–∂–∞–ª —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {name_product}:{calories_product}")
    await add_product(
        products, users, temporary_products, notification, callback
    )  # –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –±—É–¥—É—â–µ–µ –ø—Ä–æ–≥–Ω–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
    await callback.message.delete()
    await callback.message.answer(
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª <b>{name_product}</b>: {calories_product} –ö–∫–∞–ª"
    )
    await callback.answer()


async def main() -> None:
    # Initialize Bot instance with default bot properties which will be passed to all API calls
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    # And the run events dispatching
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
